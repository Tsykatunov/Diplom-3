{"name": "Проверка увеличения счетчика заказов за сегодня", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.TimeoutException: Message:", "trace": "driver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"7b68534ac099babea453ea6de0f75713\")>\nrandom_user = {'email': 'test20241111_180228_893466@tsykatunov.ru', 'name': 'unascyqz', 'password': 'lLyaR0v5wg'}\napi_client = <utils.api_client.ApiClient object at 0x1021af740>\n\n    @pytest.fixture\n    def setup(driver, random_user, api_client):\n        api_client.create_user(**random_user)\n        driver.get(\"https://stellarburgers.nomoreparties.site/login\")\n        login_page = LoginPage(driver)\n        login_page.set_email(random_user[\"email\"])\n        login_page.set_password(random_user[\"password\"])\n        login_page.click_login_button()\n>       WebDriverWait(driver, 5).until(\n            lambda x: \"login\" not in x.current_url\n        )\n\nconftest.py:63: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"7b68534ac099babea453ea6de0f75713\")>\nmethod = <function setup.<locals>.<lambda> at 0x1021832e0>, message = ''\n\n    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = \"\") -> T:\n        \"\"\"Calls the method provided with the driver as an argument until the \\\n        return value does not evaluate to ``False``.\n    \n        :param method: callable(WebDriver)\n        :param message: optional message for :exc:`TimeoutException`\n        :returns: the result of the last call to `method`\n        :raises: :exc:`selenium.common.exceptions.TimeoutException` if timeout occurs\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            time.sleep(self._poll)\n            if time.monotonic() > end_time:\n                break\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message:\n\n.venv/lib/python3.12/site-packages/selenium/webdriver/support/wait.py:105: TimeoutException"}, "parameters": [{"name": "driver", "value": "'chrome'"}], "start": 1731337347797, "stop": 1731337347797, "uuid": "64fd8193-2265-4718-86b4-002d18b2d600", "historyId": "b17470ad6be91df0dfec80402c5e58a6", "testCaseId": "6a01f8c23ac2eecc1477db415c259004", "fullName": "tests.test_orders_feed.TestOrdersFeed#test_today_orders_counter", "labels": [{"name": "feature", "value": "Лента заказов"}, {"name": "tag", "value": "@pytest.mark.usefixtures('setup')"}, {"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_orders_feed"}, {"name": "subSuite", "value": "TestOrdersFeed"}, {"name": "host", "value": "mbp-ntsykatunov-OZON-DD7NM4DF7Q"}, {"name": "thread", "value": "62677-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_orders_feed"}]}